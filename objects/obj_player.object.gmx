<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>m_state = scr_moveState;
//phy_fixed_rotation=true; 
m_canShoot = true;
m_canDash = true;
m_airborn = false;
m_facingLeft = false;
m_facingRight = true;
m_canMove = true;
m_attacking = false;
m_underwater = false;
m_hit = false;
m_blinking = false;

//unlocked abilities
m_hasSword = false;

//Controls
m_leftArrow = false;
m_upArrow = false;
m_downArrow = false;
m_rightArrow = false;
m_spaceBar = false;
m_ctrl = false;
m_z = false;
m_x = false;
m_c = false;
m_shift = false;
m_mKey = false;

m_moveSpeed = 2;
m_hspd = 0;
m_jumpSpeed = 6;
m_vspd = 0;
m_grav = .2;
m_numDashes = 3;
m_glowSize = 1;

//player starting cell
//m_cellX = 500 &lt;&lt; 8 | (phy_position_x &amp; (255));
//m_cellY = 500 &lt;&lt; 8 | (phy_position_x &amp; (255));
global.mapCellX = 50; //pos in map array
global.mapCellY = 50;
global.curCellX = 0; //for updating the map while transversing room
global.curCellY = 1;
global.newCellX = 0; //shitty way to check if we're in a different cell
global.newCellY = 1;
global.updateMap = false;

global.miniX = 50;
global.miniY = 50;

show_debug_message('starting cell: ' + string(global.mapCellX) + ' ' + string(global.mapCellY));
global.mapCellX = 50 &lt;&lt; 8 | (100 &amp; 320);
global.mapCellY = 50 &lt;&lt; 8 | (100 &amp; 180);

//show_debug_message(string(m_cellX));
//show_debug_message(string(m_cellY));

xCellPos = global.mapCellX &gt;&gt; 8;
yCellPos = global.mapCellY &gt;&gt; 8;

//show_debug_message('here');
var bin = scr_strBinToDec(string(111110100));
//show_debug_message(string(bin));

//show_debug_message(string(xCellPos));
//show_debug_message(string(yCellPos));

//map[cell_x&gt;&gt;8,cell_y&gt;&gt;8] |= $80;

//show_debug_message('next: ');

ha = scr_strBinToDec(string(01000111));
//show_debug_message(string(ha));
ha |= $80;
//show_debug_message(string(ha));

//draw map
//var color, piece, door, surf;
//m_surf = noone;
/*m_surf = surface_create(64*27, 64*27);
surface_set_target(m_surf);
for(var yy=0; yy&lt;64; yy++){
    for(var xx=0; xx&lt;64; xx++) {
        if global.map[xx, yy] &amp; $C0 == 0 continue; //don't draw unknown rooms
        if map[xx,yy] &amp; $80 color = $D08080
        else color = $808080; //set the color if room is known
        door = global.map[xx, yy] &gt;&gt; 4 &amp; 3;
        piece = (global.map[xx, yy] &amp; 15) + door * m_piecesUsed; //you'd define pieces_used 
        draw_sprite_ext(spr_mapPieces, piece, xx * 27, yy * 27, 1,1, color, 0, 1);
    }
}*/
/*
//create the surface of the bigmap
var color, piece, door;
var piecesUsed = 11;
//surf = surface_create(16*16, 16*18); // (numWidth*tileWidth, numHeight*tileHeight)
mapSurf = surface_create(320*global.scaleRes, 180*global.scaleRes);
surface_set_target(mapSurf);

for(var yy=0; yy&lt;50; yy++) {
    for(var xx=0; xx&lt;50; xx++) {
        if global.map[xx,yy] &amp; $C0 == 0 continue; //don't draw unknown rooms
        if global.map[xx,yy] &amp; $80 color = $D08080
        else color = $3336e5; //set the color if room is known
        door = global.map[xx,yy] &gt;&gt; 4 &amp; 3;
        piece = (global.map[xx,yy] &amp; 15) + door * piecesUsed; //you'd define pieces_used 
        //draw_sprite_ext(spr_mapPieces, piece, xx * 16, yy * 18, 1,1, 0, color, 1);
        draw_sprite_ext(spr_mapPieces, piece, xx * 16, yy * 16, 1, 1, 0, color, 1);
        
        //draw_sprite_ext(spr_map_pieces, piece, xx * 27, yy * 27, 1,1, color, 0, 1);
        
        //show_debug_message(string(color));   //RIGHT
        //show_debug_message(string(piece));   //RIGHT
        //show_debug_message(string(door));      //RIGHT
    }
}*/

//create the surface of the minimap
var color, piece, door;
var piecesUsed = 11;
//surf = surface_create(16*16, 16*18); // (numWidth*tileWidth, numHeight*tileHeight)
global.mapSurf = surface_create(320*global.scaleRes, 180*global.scaleRes);
surface_set_target(global.mapSurf);

var xCell = xCellPos - 2;
var yCell = yCellPos - 1;
for (var xx = 0; xx &lt; 5; xx++){
    for (var yy = 0; yy &lt; 3; yy++){
        //if global.map[xCell+xx, yCell+yy] &amp; $C0 == 0 continue; //don't draw unknown rooms
        if global.map[xCell+xx, yCell+yy] &amp; $C0 == 0 {
            draw_sprite_ext(spr_blankTile, 0, xx * 16, yy * 18, 1, 1, 0, c_white, 1);
            continue;
        }
        if global.map[xCell+xx, yCell+yy] &amp; $80 color = $ff0000;
        else color = $8421504; //set the color if room is known
        door = global.map[xCell+xx, yCell+yy] &gt;&gt; 4 &amp; 3;
        piece = (global.map[xCell+xx, yCell+yy] &amp; 15) + door * piecesUsed; //you'd define pieces_used 
        draw_sprite_ext(spr_mapPieces, piece, xx * 16, yy * 18, 1, 1, 0, color, 1);
    }
} 

//for blinking rectangle of where you are
//draw_set_color(c_white);
//draw_rectangle(xCellPos - 16, yCellPos - 32, xCellPos-6, yCellPos - 16, false); 



//surf = surface_create(320*global.scaleRes, 180*global.scaleRes);
//surface_set_target(surf);
////draw_sprite(spr_pause, 0, 0, 0);
//draw_sprite_ext(spr_mapPieces, 0, 0, 0, 1, 1, 0, c_white, 1);
//surface_reset_target();

surface_reset_target();

light = surface_create(320*global.scaleRes, 180*global.scaleRes);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stop blinking after being struck

show_debug_message("no more blink");
sprite_index = spr_playerSword;
m_hit = false;
m_blinking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset sprite to normal

m_attacking = false;
sprite_index = spr_playerSword;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>m_numDashes = 3;
m_canDash = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>m_canMove = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shoot cd

m_canShoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player dash duration

m_numDashes--;
if (m_numDashes == 0){
    m_canDash = false;
}
else{
    m_canDash = true;
}
alarm[3] = room_speed;
m_state = scr_moveState;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//lighting around player 
/*
if (global.dark){
    //show_debug_message("its dark baby")
    size = 48;
    draw_set_blend_mode(bm_subtract);
    surface_set_target(darkness);
    draw_ellipse_color(x-size/2-view_xview+random_range(-1,1), y-size/2-view_yview+random_range(-1,1), x+size/2-view_xview+random_range(-1,1), y+size/2-view_yview+random_range(-1,1), c_white, c_black, false);
    surface_reset_target();
    draw_set_blend_mode(bm_normal);
} 
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(m_state);

//player position
//global.map[m_cellX &gt;&gt; 8, m_cellY &gt;&gt; 8] |= $80;

//show_debug_message(global.map[m_cellX &gt;&gt; 8, m_cellY &gt;&gt; 8])

//show_debug_message(string(floor(phy_position_x / 320)))
//show_debug_message(string(floor(phy_position_y / 180)))

//if (m_attacking){
//    if (collision_rectangle(x, y, x+15, y+15, obj_enemy, false, true)){
//        show_debug_message('die, twattercunt!');
//        instance_destroy(obj_enemy);
//    } 
//}

//if (m_attscking){

    //instance_create(x, y, obj_hitbox);
//}

if (global.dark){
    var glowFlutter = choose(0.1, -.1, 0);
    m_glowSize += glowFlutter;
    m_glowSize = clamp(m_glowSize, .8, 1.2);
}

if (m_hit &amp;&amp; !m_blinking){
    //print("LIGHTS OUT JEW");
    alarm[5] = room_speed; //blink and invincible period
    sprite_index = spr_playerHurt;
    image_speed = .2;
    m_blinking = true;
}

if (sprite_index == spr_playerSwordStab){
    var inst;
    if (image_xscale == 1){ //facing right
        inst = collision_rectangle(x+5, y-8, x+17, y+5, obj_enemy, false, true);
        //print("facing right");
    }
    else{ //facing left
        inst = collision_rectangle(x-5, y-8, x-17, y+5, obj_enemy, false, true);
        //print("facing left");
    }
    if inst != noone
    {
        with (inst) {
            //print("CATCH A CUNT BY HIS TOE");
            if (!m_hurt){ // to prevent constantly taking damage
                //print(inst.m_hurt);
                m_hurt = true;
                m_hp -=5;
                //print(m_hp);
                if (m_hp &lt;= 0){
                    instance_destroy();
                }
                //print("HURT IS NOW TRUE");
                //print(inst.m_hurt);
            }
        }
    }
}


scr_updateMap();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_boom">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (obj_player.x &gt; obj_boom.x){
    m_hspd -= 5;
    m_vspd -= 5;
}
else if (obj_player.x &lt; obj_boom.x){
    m_hspd += 5;
    m_vspd += 5;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_cutsceneTrigger">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>m_canMove = false;
alarm[2] = room_speed * 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_eventTrigger">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_abilityPickup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_sword)){
    m_hasSword = true;
    instance_destroy(obj_sword);
    instance_destroy(obj_abilityPickup);
    sprite_index = spr_playerSword;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Collision with block

m_falling = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var i;
var offSet = 20;

for (i = 0; i &lt; 3; i++){ //hard-coded badded &gt;:c
    //show_debug_message("NumDashes: " + string(m_numDashes));
    //show_debug_message("        i: " + string(i));  
    if (i &gt;= m_numDashes){
        draw_sprite(spr_dashBoxUsed, -1, obj_player.x - 50 - offSet, obj_player.y - 70); 
    }
    else {
        draw_sprite(spr_dashBoxFull, -1, obj_player.x - 50 - offSet, obj_player.y - 70); 
    }
    offSet += 20;
}*/
//draw map
/*if (global.drawMap == true){
    //show_debug_message('draw the fuckin map');
    if (surface_exists(m_surf)){
        //surface_set_target(m_surf);
        draw_surface(m_surf, (320 * global.scaleRes) - 200, (180 * global.scaleRes) / 10);
        //surface_reset_target();
    }
    else{
        m_surf = surface_create(1000, 1000);
        surface_set_target(m_surf);
        draw_sprite_ext(spr_mapPieces, 0, 27, 27, 1,1, 0, c_white, 1);
        surface_reset_target();
    }
}*/

draw_surface(global.mapSurf, 320*global.scaleRes - 100, 20);
//surface_reset_target();


//draw_surface(mapSurf, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> ///Draw bazooka + player

//src_drawHUD();

var bazookaAngle = 0;
var bazookaSpr = spr_bazooka;

if (sprite_index == spr_playerLeft){
    bazookaSpr = spr_bazookaLeft;
}
if (sprite_index == spr_playerCrouchedLeft){
    bazookaSpr = spr_bazookaLeft;
}

//STABY STAB
if (m_z &amp;&amp; m_hasSword &amp;&amp; sprite_index != spr_playerSwordStab){
    sprite_index = spr_playerSwordStab;
    image_speed = .3;
    m_attacking = true;
    alarm[4] = room_speed/3; //reset sprite back to default
}
if (m_c){
    if (bazookaSpr == spr_bazooka){
        bazookaAngle = 315;
    }
    else if (bazookaSpr == spr_bazookaLeft){
        bazookaAngle = 45;
    }
    m_c = false;
}

/*
if (m_hasSword){
    if (sprite_index == spr_player || sprite_index == spr_playerLeft){ //player standing
        //draw_sprite_ext(bazookaSpr, image_index, x, y, 1, 1, bazookaAngle, c_white, 1); 
        draw_sprite_ext(spr_greatSword, image_index, x, y, .05, .05, bazookaAngle, c_white, 1);
    
    }
    else if (sprite_index == spr_playerCrouched || sprite_index == spr_playerCrouchedLeft){ //player crouched
        //draw_sprite(spr_bazooka, image_index, x, y+3);
        //draw_sprite_ext(bazookaSpr, image_index, x, y+3, 1, 1, bazookaAngle, c_white, 1);
        draw_sprite_ext(spr_greatSword, image_index, x, y+3, .05, .05, bazookaAngle, c_white, 1);  
    
    }
}
*/
//draw_surface(surf, 112, 256);
//draw_surface(mapSurf, 112, 256);
//draw_surface_part(mapSurf, 

//draw miniMap
/*
var xPos = xCellPos - 2;
var yPos = yCellPos - 2;
var color, piece, door;
var piecesUsed = 10;

for (var xx = 0; xx &lt; 5; xx++){
    for (var yy = 0; yy &lt; 3; yy++){
        if global.map[xCellPos+xx, yCellPos+yy] &amp; $C0 == 0 continue; //don't draw unknown rooms
        if global.map[xCellPos+xx, yCellPos+yy] &amp; $80 color = $D08080
        else color = $3336e5; //set the color if room is known
        door = global.map[xCellPos+xx, yCellPos+yy] &gt;&gt; 4 &amp; 3;
        piece = (global.map[xCellPos+xx, yCellPos+yy] &amp; 15) + door * piecesUsed; //you'd define pieces_used 
        draw_sprite_ext(spr_mapPieces, piece, xx * 16, yy * 18, 1, 1, 0, color, 1);
    }
} 
*/

////hitbox debugging
//if (sprite_index == spr_playerSwordStab){
//    draw_set_colour(c_yellow);
//    if (image_xscale == 1){ //facing right
//        draw_rectangle(x+5, y-8, x+17, y+5, false);
//    }
//    else{ //facing left
//        draw_rectangle(x-5, y-8, x-17, y+5, false);
//    }
//}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_controller</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//game settings
global.scaleRes = 4;

m_displayx = 0;
m_displayy = 0;
m_displayScale = 0;
m_cellWidth = 180;
m_cellHeight = 320;
m_piecesUsed = 0;

// Map generation
global.map = ds_grid_create(100, 100);
global.drawMap = true;
global.mapChunkX = 0;
global.mapChunkY = 0;
global.currentRoom = rm_pits;



//scr_setupMap(); //now below this

// Documentation at the bottom of the page

// set default map to 0
var rmX, rmY;
for (rmX = 0; rmX &lt; 100; rmX += 1){
   for (rmY = 0; rmY &lt; 100; rmY += 1){
      global.map[rmX, rmY] = 0;
   }
}
//spire of chains
//global.map[50, 48] = scr_strBinToDec(string(01001001));
global.map[50, 49] = scr_strBinToDec(string(01001001));
global.map[50, 50] = scr_strBinToDec(string(11001001)); //start cell
global.map[50, 51] = scr_strBinToDec(string(01001001));
global.map[50, 52] = scr_strBinToDec(string(01000111));
global.map[51, 52] = scr_strBinToDec(string(01001011));

global.map[52, 52] = scr_strBinToDec(string(01001010));

global.map[53, 52] = scr_strBinToDec(string(01000110));
global.map[53, 53] = scr_strBinToDec(string(01001001));
global.map[53, 54] = scr_strBinToDec(string(01001011));
global.map[53, 55] = scr_strBinToDec(string(01001001));
global.map[53, 54] = scr_strBinToDec(string(01001011));

//executioner
global.map[48, 55] = scr_strBinToDec(string(01000000));
global.map[49, 55] = scr_strBinToDec(string(01000000));
global.map[50, 55] = scr_strBinToDec(string(01000000));
global.map[51, 55] = scr_strBinToDec(string(01000000));
global.map[52, 55] = scr_strBinToDec(string(01000000));
global.map[48, 56] = scr_strBinToDec(string(01000000));
global.map[49, 56] = scr_strBinToDec(string(01000000));
global.map[50, 56] = scr_strBinToDec(string(01000000));
global.map[51, 56] = scr_strBinToDec(string(01000000));
global.map[52, 56] = scr_strBinToDec(string(01000000));
global.map[48, 57] = scr_strBinToDec(string(01000100));
global.map[49, 57] = scr_strBinToDec(string(01000100));
global.map[50, 57] = scr_strBinToDec(string(01000100));
global.map[51, 57] = scr_strBinToDec(string(01000100));
global.map[52, 57] = scr_strBinToDec(string(01000100));

/* binary room value mapping

    0123 4567
    
     (these numbers are just the position of the digits, it is binary).  
    
    * 4567 - 16 variants of obj_mapPiece (is it left-right, top-bottom ...)
    
        0000 - obj_mapPiece_Open
        0001 - obj_mapPiece_L
        0010 - obj_mapPiece_T
        0011 - obj_mapPiece_R
        0100 - obj_mapPiece_B
        0101 - obj_mapPiece_TL
        0110 - obj_mapPiece_TR
        0111 - obj_mapPiece_BL
        1000 - obj_mapPiece_BR
        1001 - obj_mapPiece_LR
        1010 - obj_mapPiece_TB
        1011 - obj_mapPiece_TRB_Door
        
    * 3    - is it a door ?
    * 2    - type of room - save, teleport
    * 1    - scout value - is this room viewable ?
    * 0    - fill this room in, or leave blank ?
    
    This is missing values such as: multiple doors in a tile, and does this
    room contain a secret ? Maybe more . . .
    
*/
/*
//create the surface of the minimap
var color, piece, door, surf;
var piecesUsed = 10;
//surf = surface_create(16*16, 16*18); // (numWidth*tileWidth, numHeight*tileHeight)
mapSurf = surface_create(320*global.scaleRes, 180*global.scaleRes);
surface_set_target(mapSurf);
for(var yy=500; yy&lt;510; yy++) {
    for(var xx=500; xx&lt;510; xx++) {
        if global.map[xx,yy] &amp; $C0 == 0 continue; //don't draw unknown rooms
        if global.map[xx,yy] &amp; $80 color = $D08080
        else color = $808080; //set the color if room is known
        door = global.map[xx,yy] &gt;&gt; 4 &amp; 3;
        piece = (global.map[xx,yy] &amp; 15) + door * piecesUsed; //you'd define pieces_used 
        draw_sprite_ext(spr_mapPieces, piece, xx * 16, yy * 18, 1,1, color, 0, 1);
        
        show_debug_message(string(color)); //RIGHT
        //show_debug_message(string(piece));
    }
}
*/

//show_debug_message(global.map[500,502]);

scr_applyScreenRes();
room_goto(rm_pits);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_number(obj_player) == 0) {
    player = instance_create(135, 310, obj_player);
    //camera = instance_create(player.x, player.y-12, obj_camera);
    with (player) {
        //juststarted = 100;
    }
}

// view:
//view_wport[0] = 320;
//view_wview[0] = 320;
//view_hport[0] = 180;
//view_hview[0] = 180;
//offset

if (window_get_height() &lt; window_get_width()) {
    m_displayScale = window_get_height() / 180;
} else m_displayScale = window_get_width() / 320;

//show_debug_message(string(m_displayScale))

m_displayx = window_get_width() / 2 - 320 * m_displayScale / 2;
m_displayy = window_get_height() / 2 - 180 * m_displayScale / 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>application_surface_draw_enable(0);
if (surface_exists(application_surface)) scr_drawGameSurface(m_displayx, m_displayy, m_displayScale);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
